using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using static Terraria.ModLoader.ModContent;

namespace OrchidMod.General.Items.Misc
{
	internal class MineshaftHook : ModItem
	{
		public override void SetStaticDefaults() {
			DisplayName.SetDefault("Escape Rope");
		}

		public override void SetDefaults() {
			item.noUseGraphic = true;
			item.damage = 0;
			item.knockBack = 1f;
			item.useStyle = 5;
			item.shootSpeed = 15f;
			item.width = 26;
			item.height = 32;
			item.UseSound = SoundID.Item1;
			item.useAnimation = 20;
			item.useTime = 20;
			item.rare = 1;
			item.noMelee = true;
			item.value = Item.sellPrice(0, 0, 10, 0);
			item.shoot = ProjectileType<MineshaftHookProjectile>();
		}
	}

	internal class MineshaftHookProjectile : OrchidModProjectile
	{
		public override void SetStaticDefaults() {
			DisplayName.SetDefault("Escape Rope");
		}

		public override void SafeSetDefaults() {
			projectile.netImportant = true;
			projectile.width = 18;
			projectile.height = 20;
			projectile.aiStyle = 7;
			projectile.friendly = true;
			projectile.penetrate = -1;
			projectile.tileCollide = false;
			projectile.timeLeft *= 10;
		}
		
		public override void AI() {
			if (!this.initialized)	{
				projectile.velocity.X = 0f;
				projectile.velocity.Y = 15f;
				this.initialized = true;
			}
		}

		// public override bool? CanUseGrapple(Player player) {
			// bool hooksOut = false;
			// for (int l = 0; l < 1000; l++) {
				// if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == projectile.type) {
					// hooksOut = true;
					// break;
				// }
			// }
			
			// if (hooksOut) {
				// return false;
			// }
			// return true;
		// }

		//Return true if it is like: Hook, CandyCaneHook, BatHook, GemHooks
		public override bool? SingleGrappleHook(Player player)
		{
			return true;
		}

		//Use this to kill oldest hook. For hooks that kill the oldest when shot, not when the newest latches on: Like SkeletronHand
		//You can also change the projectile like: Dual Hook, Lunar Hook
		// public override void UseGrapple(Player player, ref int type)
		// {
			// int hooksOut = 0;
			// int oldestHookIndex = -1;
			// int oldestHookTimeLeft = 100000;
			// for (int i = 0; i < 1000; i++)
			// {
				// if (Main.projectile[i].active && Main.projectile[i].owner == projectile.whoAmI && Main.projectile[i].type == projectile.type)
				// {
					// hooksOut++;
					// if (Main.projectile[i].timeLeft < oldestHookTimeLeft)
					// {
						// oldestHookIndex = i;
						// oldestHookTimeLeft = Main.projectile[i].timeLeft;
					// }
				// }
			// }
			// if (hooksOut > 1)
			// {
				// Main.projectile[oldestHookIndex].Kill();
			// }
		// }

		// Amethyst Hook is 300, Static Hook is 600
		public override float GrappleRange() {
			return 400f;
		}

		public override void NumGrappleHooks(Player player, ref int numHooks) {
			numHooks = 2;
		}

		// default is 11, Lunar is 24
		public override void GrappleRetreatSpeed(Player player, ref float speed) {
			speed = 14f;
		}

		public override void GrapplePullSpeed(Player player, ref float speed) {
			speed = 4;
		}

		public override void GrappleTargetPoint(Player player, ref float grappleX, ref float grappleY) {
			Vector2 dirToPlayer = projectile.DirectionTo(player.Center);
			float hangDist = 50f;
			grappleX += dirToPlayer.X * hangDist;
			grappleY += dirToPlayer.Y * hangDist;
		}

		public override void SafePreDraw(SpriteBatch spriteBatch, Color lightColor) {
			Vector2 playerCenter = Main.player[projectile.owner].MountedCenter;
			Vector2 center = projectile.Center;
			Vector2 distToProj = playerCenter - projectile.Center;
			float projRotation = distToProj.ToRotation() - 1.57f;
			float distance = distToProj.Length();
			while (distance > 30f && !float.IsNaN(distance)) {
				distToProj.Normalize();                 //get unit vector
				distToProj *= 24f;                      //speed = 24
				center += distToProj;                   //update draw position
				distToProj = playerCenter - center;    //update distance
				distance = distToProj.Length();
				Color drawColor = lightColor;

				//Draw chain
				spriteBatch.Draw(mod.GetTexture("General/Items/Mist/MineshaftHookChain"), new Vector2(center.X - Main.screenPosition.X, center.Y - Main.screenPosition.Y),
					new Rectangle(0, 0, Main.chain30Texture.Width, Main.chain30Texture.Height), drawColor, projRotation,
					new Vector2(Main.chain30Texture.Width * 0.5f, Main.chain30Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
			}
		}
	}

	// Animated hook example
	// Multiple, 
	// only 1 connected, spawn mult
	// Light the path
	// Gem Hooks: 1 spawn only
	// Thorn: 4 spawns, 3 connected
	// Dual: 2/1 
	// Lunar: 5/4 -- Cycle hooks, more than 1 at once
	// AntiGravity -- Push player to position
	// Static -- move player with keys, don't pull to wall
	// Christmas -- light ends
	// Web slinger -- 9/8, can shoot more than 1 at once
	// Bat hook -- Fast reeling

}
